global
  external-check
  insecure-fork-wanted
  log stdout format raw local0 info

defaults
  log global
  mode http
  option httplog
  option dontlognull
  option forwardfor
  timeout connect 5s
  timeout client 60s
  timeout server 60s
  timeout check 60s
  errorfile 400 /usr/local/etc/haproxy/errors/400.http
  errorfile 403 /usr/local/etc/haproxy/errors/403.http
  errorfile 408 /usr/local/etc/haproxy/errors/408.http
  errorfile 500 /usr/local/etc/haproxy/errors/500.http
  errorfile 502 /usr/local/etc/haproxy/errors/502.http
  errorfile 503 /usr/local/etc/haproxy/errors/503.http
  errorfile 504 /usr/local/etc/haproxy/errors/504.http

frontend proxy_in
  bind *:9100
  # The stats page is not required but it should be used during the initial setup so you know it works.
  stats uri /haproxy?stats
  http-request use-service prometheus-exporter if { path /metrics }
  mode http
  option http-use-proxy-header
  option accept-invalid-http-request
  
  # Set the max connections to the frontend higher than the default 2000
  maxconn 5000

  # NAT static host names to a different backend
  # This ACL looks for the port 9001 in your backendurl when Manager sends data to RDM.
  acl rdm hdr_dom(host) -i rdm.lsmpogo.com
  acl rdmwh hdr_dom(host) -i rdm-webhook.lsmpogo.com
  
  # This ACL is used to drop traffic. You can create others to block any traffic
  #acl host_name hdr_dom(host) -i mesu.apple.com appldnld.apple.com apple.com
  
  # These two ACLs are used to split game traffic to the paid proxies
  acl ptc_auth hdr_dom(host) -i sso.pokemon.com
  acl pgorelease hdr_dom(host) -i pgorelease.nianticlabs.com

  # Only use this if you are dropping traffic.
  #http-request silent-drop if host_name

  # This line is used to send Manager traffic to RDM instead of the external proxies.
  # use_backend rdm if rdm
  # use_backend rdmwh if rdmwh

  # These are used to split the traffic on the paid proxies
  use_backend proxy_ptc if ptc_auth
  use_backend proxy_nia if pgorelease

  # This line is used to send all traffic not related to RDM or the game to the Squid proxy on the intranet. 
  default_backend squid

backend rdm
  balance source
  mode http  
  server rdm rdmnginxfe.rdm.svc.cluster.local:9000 ssl verify none

backend rdmwh
  balance source
  mode http
  server rdm rdmnginxfe.rdm.svc.cluster.local:9001 ssl verify none

backend squid
  balance source
  mode http
  fullconn 1000

  server squid 10.43.0.128:3128

backend proxy_ptc
  # If you're setting up HAProxy on the same network, use `balance source`.
  # If you're setting up HAProxy on an externally hosted server, use `balance leastconn`.
  balance source
  #balance leastconn
  
  # Set the max connections for each server to 1000 so you don't drop data
  # This defauls to 10% of maxconn or 10% of the default (which limits it to 200 connections)
  fullconn 1000

  # CSRF checks mean this always fails.
  # This section of external-check settings is important for checking if your proxy IP is banned.
  # option external-check
  # external-check path "/usr/bin:/bin"
  # The `external-check command` is used with the location of the file created in the next section.
  # external-check command /usr/local/bin/bancheck_ptc.sh

  # The `reqadd Proxy-Authorization` is only needed if your proxies require authentication
  # Replace base64EncodedAccountInfo with your base64 encoded username and password
  # Run this command to generate the base64: echo -n "username:password" | base64
  http-request add-header "Proxy-Authorization: Basic" MPP_AUTH

  # The `check inter 20s fall 3 rise 2` setting will run the ban script every 20 seconds.
  # If an address fails 3 times, it will be taken down and the other addresses will get its traffic.
  # It will be put back into rotation if it passes the checker twice in a row.
  # Below are example proxy lines. Add them in the following format:
  #server <server2 name> <proxy IP>:<port> check inter 20s fall 3 rise 2
  server localprox 10.43.0.128:3128 check inter 20s fall 3 rise 2
  # server mpp_proxy01 23.106.16.150:29842 check inter 20s fall 3 rise 2
  # server mpp_proxy02 23.106.16.39:29842 check inter 20s fall 3 rise 2
  # server mpp_proxy03 64.43.115.115:29842 check inter 20s fall 3 rise 2
  # server mpp_proxy04 64.43.115.175:29842 check inter 20s fall 3 rise 2
  # server mpp_proxy05 64.43.115.72:29842 check inter 20s fall 3 rise 2

  ## 2023-07-31
  server mpp_proxy01 168.91.66.114:29842 check inter 20s fall 3 rise 2
  server mpp_proxy02 168.91.66.186:29842 check inter 20s fall 3 rise 2
  server mpp_proxy03 168.91.84.172:29842 check inter 20s fall 3 rise 2
  server mpp_proxy04 168.91.84.228:29842 check inter 20s fall 3 rise 2
  server mpp_proxy05 168.91.84.24:29842 check inter 20s fall 3 rise 2

backend proxy_nia
  # Use the same settings and servers as proxy_ptc except the banckcheck script below
  balance source
  fullconn 1000
  # option external-check
  # external-check path "/usr/bin:/bin"
  # external-check command /usr/local/bin/bancheck_nia.sh
  http-request add-header "Proxy-Authorization: Basic" MPP_AUTH
  #server <server2 name> <proxy IP>:<port> check inter 20s fall 3 rise 2
  server localprox 10.43.0.128:3128 check inter 20s fall 3 rise 2
  # server mpp_proxy01 23.106.16.150:29842 check inter 20s fall 3 rise 2
  # server mpp_proxy02 23.106.16.39:29842 check inter 20s fall 3 rise 2
  # server mpp_proxy03 64.43.115.115:29842 check inter 20s fall 3 rise 2
  # server mpp_proxy04 64.43.115.175:29842 check inter 20s fall 3 rise 2
  # server mpp_proxy05 64.43.115.72:29842 check inter 20s fall 3 rise 2

  ## 2023-07-31
  server mpp_proxy01 168.91.66.114:29842 check inter 20s fall 3 rise 2
  server mpp_proxy02 168.91.66.186:29842 check inter 20s fall 3 rise 2
  server mpp_proxy03 168.91.84.172:29842 check inter 20s fall 3 rise 2
  server mpp_proxy04 168.91.84.228:29842 check inter 20s fall 3 rise 2
  server mpp_proxy05 168.91.84.24:29842 check inter 20s fall 3 rise 2
